# This is an example goreleaser.yaml file with some sane defaults.
# Make sure to check the documentation at http://goreleaser.com
before:
  hooks:
    # You may remove this if you don't use go modules.
    - go mod download
    # you may remove this if you don't need go generate
    - go generate ./...

builds:
  - ldflags:
      - -s -w -X "main.version={{ .Version }}"
  - main: main.go
    binary: tfswitch
    id: tfswitch
    goos:
      - linux
      - windows
      - darwin
    goarch:
      - amd64


checksum:
  name_template: 'checksums.txt'
changelog:
  sort: asc
  filters:
    exclude:
      - '^docs:'
      - '^test:'




archives:
  -
    # ID of this archive.
    # Defaults to `default`.
    id: tfswitch-archive

    # Builds reference which build instances should be archived in this archive.
    builds:
      - default

    # Archive name template.
    # Defaults:
    # - if format is `tar.gz`, `tar.xz`, `gz` or `zip`:
    #   - `{{ .ProjectName }}_{{ .Version }}_{{ .Os }}_{{ .Arch }}{{ if .Arm }}v{{ .Arm }}{{ end }}{{ if .Mips }}_{{ .Mips }}{{ end }}`
    # - if format is `binary`:
    #   - `{{ .Binary }}_{{ .Version }}_{{ .Os }}_{{ .Arch }}{{ if .Arm }}v{{ .Arm }}{{ end }}{{ if .Mips }}_{{ .Mips }}{{ end }}`
    name_template: "{{ .ProjectName }}_{{ .Version }}_{{ .Os }}_{{ .Arch }}"

    # Replacements for GOOS and GOARCH in the archive name.
    # Keys should be valid GOOSs or GOARCHs.
    # Values are the respective replacements.
    # Default is empty.
    replacements:
      amd64: 64-bit
      386: 32-bit
      darwin: macOS
      linux: Tux

    # Set to true, if you want all files in the archive to be in a single directory.
    # If set to true and you extract the archive 'goreleaser_Linux_arm64.tar.gz',
    # you get a folder 'goreleaser_Linux_arm64'.
    # If set to false, all files are extracted separately.
    # You can also set it to a custom folder name (templating is supported).
    # Default is false.
    wrap_in_directory: true

    # Archive format. Valid options are `tar.gz`, `tar.xz`, `gz`, `zip` and `binary`.
    # If format is `binary`, no archives are created and the binaries are instead
    # uploaded directly.
    # Default is `tar.gz`.
    format: tar.gz

    # Can be used to change the archive formats for specific GOOSs.
    # Most common use case is to archive as zip on Windows.
    # Default is empty.
    format_overrides:
      - goos: windows
        format: zip

    # Additional files/template/globs you want to add to the archive.
    # Defaults are any files matching `LICENCE*`, `LICENSE*`,
    # `README*` and `CHANGELOG*` (case-insensitive).
    files:
      - LICENSE
      - CHANGELOG.md

# .goreleaser.yml
brews:
  -
    # Name template of the recipe
    # Default to project name
    name: tfswitch

    # IDs of the archives to use.
    # Defaults to all.
    ids:
      - tfswitch-archive

    tap:
      owner: versus
      name: homebrew-tap

    #  token: "{{ .Env.HOMEBREW_TAP_GITHUB_TOKEN }}"



    # Git author used to commit to the repository.
    # Defaults are shown.
    commit_author:
      name: versus
      email: versus.dev@gmail.com

    # Folder inside the repository to put the formula.
    # Default is the root folder.
    folder: Formula

    # Caveats for the user of your binary.
    # Default is empty.
    caveats: "Type 'tfswitch' on your command line and choose the terraform version that you want from the dropdown. This command currently only works on MacOs and Linux"

    # Your app's homepage.
    # Default is empty.
    homepage: "https://warrensbox.github.io/terraform-switcher"

    # Your app's description.
    # Default is empty.
    description: "The tfswitch command lets you switch between terraform versions."

    # Setting this will prevent goreleaser to actually try to commit the updated
    # formula - instead, the formula file will be stored on the dist folder only,
    # leaving the responsibility of publishing it to the user.
    # If set to auto, the release will not be uploaded to the homebrew tap
    # in case there is an indicator for prerelease in the tag e.g. v1.0.0-rc1
    # Default is false.
    skip_upload: false



    # Packages that conflict with your package.
    conflicts:
      - terraform


    # So you can `brew test` your formula.
    # Default is empty.
    test: |
      system "#{bin}/tfswitch --version"
      ...

    # Custom install script for brew.
    # Default is 'bin.install "program"'.
    install: |
      bin.install "tfswitch"
